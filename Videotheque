package homewatch;
import java.util.ArrayList;
import java.util.Iterator;		// Utiliser un itérateur? A méditer....

/**
*Classe representant un ensemble de Oeuvres par utilisateurs.
*@author Jean Luc Muteba
*/
public class Videotheque<Oeuvre>
{
	
	private ArrayList<Oeuvre> catalogue;
	
	/**
	*Constructeur d'objet de type Videotheque, contenant un catalogue de films/series.
	*
	*/
	public Videotheque()
	{
		catalogue = new ArrayList<Oeuvre>();
	}
	
	/**
	 * Methode d'ajout d'une oeuvre au catalogue de films/series.
	 * @param o l'oeuvre a ajouter.
	 */
	public void addOeuvre(Oeuvre o)
	{
		catalogue.add(o);
		
	}
	
	/**
	 * Methode de suppression d'un élément du catalogue de films/séries.
	 * @param o l'oeuvre a retirer.
	 */
	public void removeOeuvre(Oeuvre o)
	{
		catalogue.remove(o);
		
	}
	/**
	*Methode d'interversion de deux cases d'un tableau.
	*@param val1 val2 deux entiers representant des indices d'un tableau.
	*
	*/
	public void swapOeuvre(int val1, int val2)
	{
		Oeuvre temp = catalogue.get(val2); //Sauvegarde du Oeuvre a ecraser.
		Oeuvre oeuvre1 = catalogue.get(val1);
		Oeuvre oeuvre2 = catalogue.get(val2); //Le Oeuvre a ecraser.
		
		oeuvre2 = oeuvre1;
		oeuvre1 = temp;
		
		
	}
	
	/**
	*
	* Methode de tri de la videotheque, selon un classement croissant, par genre, de l'ensemble des Oeuvres.
	* (Bubble sort)
	*/
	public void triCroissantParGenre()
	{
		boolean trie = false; // tableau entierement trie ou non.
		for(int i = 0; i < catalogue.size(); i++)
		{
			Oeuvre o1 = catalogue.get(i);	//Oeuvre 1 a comparer.
			Oeuvre o2 = catalogue.get(i++);	//Oeuvre 2 a comparer, a l'indice suivant.
			
			if(o1.getGenre() > o2.getGenre())
			{
				swapOeuvre(i,i++);

			}
			trie = true;		//tableau entierement trie.
		}
		
		
		
	}
	
	/**
	*Methode de tri decroissant par order de genre.
	*
	*/
	public void triDecroissantParGenre(Videotheque catalogue,Genre genre)
	{
		boolean trie = false; // tableau entierement trie ou non.
		for(int i = 0; i < catalogue.size() && trie == false; i++)
		{
			if(catalogue.get(i).getGenre() < catalogue.get(i++).getGenre())
			{
				swapOeuvre(i,i++);

			}
			trie = true;	//tableau entierement trie.
		}
		
		
	}
	/**
	 * 
	 * @param al
	 */
	public void triCroissantParDateParution(Videotheque v)
	{
		boolean trie = false; // tableau entierement trie ou non.
		for(int i = 0; i < catalogue.size() && trie == false; i++)
		{
			if(catalogue.get(i).getAnneeSortie() > catalogue.get(i++).getAnneeSortie())
			{
				swapOeuvre(catalogue.get(i),catalogue.get(i++));

			}
			trie = true;
		}
		
		
	}
	
	public void triDecroissantParDateParution(ArrayList<Oeuvre> al)
	{
		boolean trie = false; // tableau entierement trie ou non.
		for(int i = 0; i < catalogue.size() && trie == false; i++)
		{
			if(catalogue.get(i).getAnneeSortie() < catalogue.get(i++).getAnneeSortie())
			{
				swapOeuvre(i,i++);

			}
			trie = true;
		}
		
		
	}
	
	public void triCroissantParTitre(ArrayList<Oeuvre> al)
	{
		boolean trie = false; // tableau entierement trie ou non.
		for(int i = 0; i < catalogue.size() && trie == false; i++)
		{
			if(catalogue.get(i).getTitre() > catalogue.get(i++).getTitre())
			{
				swapOeuvre(i,i++);

			}
			trie = true;
		}
		
		
	}
	
	public void triDecroissantParTitre()
	{
		 boolean trie = false; // tableau entierement trie ou non.
		while(!trie)
		{
		for(int i = 0; i < catalogue.size() && trie == false; i++)
		{
			if(catalogue.get(i).getTitre() < catalogue.get(i++).getTitre())
			{
				swapOeuvre(i,i++);

			}
			trie = true;
		}
		}
	
		
	}
	
	/**
	 * Methode de recherche de
	 * @param title
	 * @return
	 */
	public Oeuvre rechercheLineaireParTitre(String title)
	{
		
		
		/*for(Oeuvre o : catalogue)
		{
				
			if(o.getTitre().equals(title))		//Ze problem.
			{
				return o;
			}
		}*/
		
		Iterator<Oeuvre> iter = catalogue.iterator();	//Itérateur servant à parcourir l'ArrayList.
		while(iter.hasNext())
		{
			
			Oeuvre o = iter.next();
			if(o.getTitre().equals(title))
			{
				return o;
				
			}
		}
	}
	
}
