import java.util.ArrayList;
import java.util.Iterator;		// Utiliser un itérateur? A méditer....

/**
*Classe representant un ensemble de Oeuvres par utilisateurs.
*
*/
public class Videotheque<Oeuvre>
{
	
	private ArrayList<Oeuvre> catalogue;
	
	/**
	*Constructeur d'objet de type Videotheque
	*
	*/
	public Videotheque()
	{
		
	}
	/**
	*Methode d'interversion de deux cases d'un tableau.
	*@param val1 val2 deux entiers representant des indices d'un tableau.
	*
	*/
	public void swapOeuvre(int val1, int val2)
	{
		Oeuvre temp = catalogue.get(val2); //Sauvegarde du Oeuvre a ecraser.
		Oeuvre oeuvre1 = catalogue.get(val1);
		Oeuvre oeuvre2 = catalogue.get(val2); //Le Oeuvre a ecraser.
		
		oeuvre2 = oeuvre1;
		oeuvre1 = temp;
		
		
	}
	
	/**
	*
	* Methode de tri de la videotheque, selon un classement croissant, par genre, de l'ensemble des Oeuvres.
	* (Bubble sort)
	*/
	public void triCroissantParGenre()
	{
		boolean trie = false; // tableau entierement trie ou non.
		for(Oeuvre f : catalogue)
		{
			/*if(f.getGenre() > catalogue.get.getNomGenre())
			{
				swapOeuvre(catalogue[i],catalogue[i++]);

			}*/
			trie = true;
		}
		
		
		
	}
	
	/**
	*Methode de tri decroissant par order de genre.
	*
	*/
	public void triDecroissantParGenre(ArrayList<Oeuvre> al,Genre genre)
	{
		/*boolean trie = false; // tableau entierement trie ou non.
		for(Oeuvre f : catalogue)
		{
			if(catalogue.get(i).getNomGenre() < catalogue.get(i++).getNomGenre())
			{
				swapOeuvre(catalogue.get(i),catalogue.get(i++));

			}
			trie = true;
		}
		*/
		
	}
	public void triCroissantParDateParution(ArrayList<Oeuvre> al)
	{
		/*boolean trie = false; // tableau entierement trie ou non.
		for(int i = 0; i < catalogue.length && trie == false; i++)
		{
			if(catalogue[i].getAnneeSortie() > catalogue[i++].getAnneeSortie())
			{
				swapOeuvre(catalogue[i],catalogue[i++]);

			}
			trie = true;
		}
		*/
		
	}
	
	public void triDecroissantParDateParution(ArrayList<Oeuvre> al)
	{
		/*boolean trie = false; // tableau entierement trie ou non.
		for(int i = 0; i < catalogue.length && trie == false; i++)
		{
			if(catalogue[i].getAnneeSortie() < catalogue[i++].getAnneeSortie())
			{
				swapOeuvre(catalogue[i],catalogue[i++]);

			}
			trie = true;
		}
		*/
		
	}
	
	public void triCroissantParTitre(ArrayList<Oeuvre> al)
	{
		/*boolean trie = false; // tableau entierement trie ou non.
		for(int i = 0; i < catalogue.length && trie == false; i++)
		{
			if(catalogue[i].getTitre() > catalogue[i++].getTitre())
			{
				swapOeuvre(catalogue[i],catalogue[i++]);

			}
			trie = true;
		}
		*/
		
	}
	
	public void triDecroissantParTitre(ArrayList<Oeuvre> al)
	{
		/*boolean trie = false; // tableau entierement trie ou non.
		while(!trie)
		{
		for(int i = 0; i < catalogue.length && trie == false; i++)
		{
			if(catalogue[i].getTitre() < catalogue[i++].getTitre())
			{
				swapOeuvre(catalogue[i],catalogue[i++]);

			}
			trie = true;
		}
		*/
		
	}
	
	/**
	 * 
	 * @param title
	 * @return
	 */
	public Oeuvre rechercheLineaireParTitre(String title)
	{
		
		
		for(Oeuvre f : catalogue)
		{
				
			if(f.getTitre() == title)		//Ze problem.
			{
				return f;
			}
		}
	}
}
