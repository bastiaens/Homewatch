package Home.modele;
 
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Properties;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import Home.vue.*;

/**
 * @author Olivier Bastiaens et JL
 */

public class OeuvreDAO extends Observable implements Iterator {
	
private Connection myConn;
private List<Oeuvre> list = new ArrayList<>();

	
	public OeuvreDAO() throws Exception {
		
		// va rechercher le mot de passe, le nom de l'utilisateur et l'URL de connection dans un dossier Mysql
		Properties props = new Properties();
		props.load(new FileInputStream("Mysql/videot.properties"));
		
		String user = props.getProperty("user");
		String password = props.getProperty("password");
		String dburl = props.getProperty("dburl");
		
		// connect to database
		myConn = DriverManager.getConnection(dburl, user, password);
		
		System.out.println("DB connection successful to: " + dburl);
	}
	
	/**
	 * Méthode qui renvoie tout les film de la db
	 * @return list, list contenent tout les films se trouvant dans la db
	 * @throws Exception
	 */
	
	public List<Oeuvre> getAllOeuvres() throws Exception {
		
		
		String req = "select idFilm, titre, genre, nom_re, prenom_re, date_parution"
				+ " from videot.film natural join videot.genre natural join videot.réalisateur;";
		Statement myStmt = null;
		ResultSet myRs = null;

		try {
		
			myStmt = myConn.createStatement();
			myRs = myStmt.executeQuery(req);
			Oeuvre oeuvre;
			while (myRs.next()) {
				 oeuvre = new Oeuvre (myRs.getInt("idFilm"),
						 myRs.getString("titre"),
						 myRs.getString("genre"),
						 myRs.getString("nom_re"),
						 myRs.getString("prenom_re"),
						 myRs.getInt("date_parution"));
				list.add(oeuvre);
			}
			
			return list;
		}
		finally {
			close(myStmt, myRs, null);
		}
	}
	
	
	
	
	
	public String displayListeOeuvre(List<Oeuvre> list){
		String catalogue = "";
		
		for(Iterator it = list.iterator(); it.hasNext();)
		{
			catalogue += it.next().toString();
			
		}
		
		return catalogue;
		
	}
	
	/**
	 * Méthode qui permet de rechercher un film sur base de son titre entrer par l'utilisateur
	 * @param titre
	 * @return toutes les informations concernant le film demande
	 * @throws Exception
	 */
	public List<Oeuvre> searchOeuvre(String titre) throws Exception {
		
		String req = "select idFilm, titre, genre, nom_re, prenom_re, date_parution"
				+ " from videot.film natural join videot.genre natural join videot.réalisateur where titre like ?";
		PreparedStatement myStmt = null;
		ResultSet myRs = null;

		try {
			titre += "%";
			myStmt = myConn.prepareStatement(req);
			myStmt.setString(1, titre);
			myRs = myStmt.executeQuery();
			Oeuvre Oeuvre;
			while (myRs.next()) {
				 Oeuvre = new Oeuvre (myRs.getInt("idFilm"),
						 myRs.getString("titre"),
						 myRs.getString("genre"),
						 myRs.getString("nom_re"),
						 myRs.getString("prenom_re"),
						 myRs.getInt("date_parution"));
				list.add(Oeuvre);
			}
			
			return list;
		}
		finally {
			close(myStmt, myRs, null);
		}
	}
		
	
	/**
	 * Méthode qui permet de rechercher un film sur base de son titre entrer par l'utilisateur
	 * @param titre
	 * @return toutes les informations concernant le film demande
	 * @throws Exception
	 */
	public List<Oeuvre> searchOeuvreById(String id) throws Exception {
		
		String req = "select idFilm, titre, genre, nom_re, prenom_re, date_parution"
				+ " from videot.film natural join videot.genre natural join videot.réalisateur where idFilm like ?";
		PreparedStatement myStmt = null;
		ResultSet myRs = null;

		try {
			id += "%";
			myStmt = myConn.prepareStatement(req);
			myStmt.setString(1, id);
			myRs = myStmt.executeQuery();
			Oeuvre Oeuvre;
			while (myRs.next()) {
				 Oeuvre = new Oeuvre (myRs.getInt("idFilm"),
						 myRs.getString("titre"),
						 myRs.getString("genre"),
						 myRs.getString("nom_re"),
						 myRs.getString("prenom_re"),
						 myRs.getInt("date_parution"));
				list.add(Oeuvre);
			}
			
			return list;
		}
		finally {
			close(myStmt, myRs, null);
		}
	}

		
	/**
	 *Méthode permettant d'ajouter le titre et l'annee du film dans la base de donnée.
	 * @param Oeuvre
	 * @throws Exception
	 */
	public void addFilm(Oeuvre Oeuvre,String movieTitle,String year ) throws Exception {
		
		PreparedStatement myPstmt = null;
		
		//les requêtes:
		String reqFilm = "INSERT INTO `videot`.`réalisateur` (` + titre `, `date_parution`) VALUES ( " + movieTitle + ", " + year + ")"
				+ "SELECT titre,date_parution"
				+ "FROM 'film'"
				+ "WHERE NOT EXISTS(SELECT 'titre' FROM film);";
		
		
		try {
			myPstmt = myConn.prepareStatement(reqFilm);
			
			//set param pour tab film
			myPstmt.setString(1, Oeuvre.getTitre());
			myPstmt.setInt(2, Oeuvre.getDate_parution());
		
			//exécutée la requête
			myPstmt.executeUpdate();
			
		}
		finally {
			close(null, null, null, myPstmt);
		}
	}
	
	/**
	 *Méthode permettant d'ajouter le titre et l'annee du film dans la base de donnée.
	 * @param Oeuvre
	 * @throws Exception
	 */
	public void addRealisateur(Oeuvre Oeuvre ) throws Exception {
		
		PreparedStatement myPstmt = null;
		
		//les requêtes:
		String reqFilm = "INSERT INTO `videot`.`réalisateur` (`titre`, `date_parution`) VALUES (?,?)"
				+ "SELECT titre,date_parution"
				+ "FROM 'film'"
				+ "WHERE NOT EXISTS(SELECT 'titre' FROM film);";
		
		try {
			myPstmt = myConn.prepareStatement(reqFilm);
			
			//set param pour tab film
			myPstmt.setString(1, Oeuvre.getTitre());
			myPstmt.setInt(2, Oeuvre.getDate_parution());
		
			//exécutée la requête
			myPstmt.executeUpdate();
			
		}
		finally {
			close(null, null, null, myPstmt);
		}
	}
	
	public void addOeuvre(Oeuvre o) throws Exception
	{
		PreparedStatement myPstmt = null;
		PreparedStatement myPstmt3 = null;
		
		//les requêtes:
		String reqFilm = "INSERT INTO videot.film (titre, date_parution, idGenre) VALUES (?,?,?)";
		String reqRéalisateur = "INSERT INTO videot.réalisateur (nom_re, prenom_re) VALUES(?,?)";
		
		try {
			myPstmt = myConn.prepareStatement(reqFilm);
			//set param pour tab film
			myPstmt.setString(1, o.getTitre());
			myPstmt.setInt(2, o.getDate_parution());
			myPstmt.setInt(3, rechercheGenreId(o.getGenre()));
			myPstmt.executeUpdate();
			
			
			/* 
			 * Creation du nouvel element (l'id du genre est null)
			 * Update film SET idGenre = legenredelutilisateur WHERE titre = titredelutilisateur
			 * */
			
			myPstmt3 = myConn.prepareStatement(reqRéalisateur);
			//set param pour tab réalisateur
			myPstmt3.setString(1, o.getNomReal());
			myPstmt3.setString(2, o.getPrenomReal());
			myPstmt3.executeUpdate();
			
		}
		finally {
			close(null, null, null, myPstmt);
			close(null, null, null, myPstmt3);
		}
		
	}

	/**
	 * 
	 * Méthode qui permet de modifier les données d'un film 
	 * @param Oeuvre
	 * @throws Exception
	 */
	public void UpdateOeuvres(Oeuvre Oeuvre ) throws Exception {
		PreparedStatement myPstmt = null;
		
		try {
			//myPstmt = myConn.prepareStatement("UPDATE film SET  titre=?, description=?, idRéalisateur=?, idGenre=?, date_parution=? WHERE titre =ancienTitre ");
			myPstmt = myConn.prepareStatement("UPDATE film SET titre=?, description=?, idRéalisateur=?, idGenre=?, date_parution=?"
			+ " WHERE idFilm = ?");
			
			//set param
			
			myPstmt.setString(1, Oeuvre.getTitre());
			myPstmt.setString(2, Oeuvre.getDescription());
			myPstmt.setInt(3, Oeuvre.getIdRéalisateur());
			myPstmt.setInt(4, Oeuvre.getIdGenre());
			myPstmt.setInt(5, Oeuvre.getDate_parution());
			myPstmt.setInt(6, Oeuvre.getIdFilm());
		
			//exécutée la requête
			myPstmt.executeUpdate();
			System.out.println("le film a été modifié avec succes");
		}
		finally {
			close(null, null, myPstmt);
		}
	}
	
	/**
	 * Méthode qui permet de supprimer un film 
	 * @param idFilm
	 * @throws Exception
	 */
	public void deleteOeuvres(String titre ) throws Exception {
		PreparedStatement myPstmt = null;
		
		try
		{
			
			myPstmt = myConn.prepareStatement("DELETE From videot.film"
					+ " WHERE titre = ?");
			myPstmt.setString(1, titre);
					
			myPstmt.executeUpdate();
			System.out.println("le film a été supprimé avec succès.");

	

		}
		finally
		{
			close(null,null,myPstmt);
		}
	}
	
	public int rechercheGenreId(String genre){
		
		int idGenre = 0; //variable de travail
		String reqIdGenre = "SELECT idGenre FROM genre WHERE genre = ? ";
		PreparedStatement myStmt = null;
		ResultSet myRs = null;
    	
    	try {
    	    myStmt = myConn.prepareStatement(reqIdGenre);
    	    myStmt.setString(1, genre);
    	    myRs = myStmt.executeQuery();

    		while(myRs.next()) {
    			idGenre = myRs.getInt("idGenre");
    		}
    	} catch(SQLException e) {
    		e.printStackTrace();
    	}
		
		return idGenre;
		
	}
	
	public void addRowtoJTable(DefaultTableModel model, String titre) throws Exception {
		
		List<Oeuvre> film = new ArrayList<Oeuvre>();
		film = searchOeuvre(titre);
		
		  Object[] row = new Object[6];
		  for(int i = 0; i < film.size(); i++)
		  {
			  row[0] = film.get(i).getIdFilm();
	           row[1] = film.get(i).getTitre();
	           row[2] = film.get(i).getGenre();
	           row[3] = film.get(i).getNomReal();
	           row[4] = film.get(i).getPrenomReal();
	           row[5] = film.get(i).getDate_parution();
	           
	           model.addRow(row);
		  }
	
	}
	

	/**
	 * 	Methode de reinitialisation d'un modele contenant des films.
	 * @param model
	 */
	public void clearJTable(DefaultTableModel model) throws Exception
	{
		
		model.setRowCount(0);
		
	}
	
	/**
	 * 
	 * @param myConn
	 * @param myStmt
	 * @param myRs
	 * @param myPstmt
	 * @throws SQLException
	 */
	private static void close(Connection myConn, Statement myStmt, ResultSet myRs, PreparedStatement myPstmt)
			throws SQLException {

		if (myRs != null) {
			myRs.close();
		}

		if (myStmt != null) {
			myStmt.close();
		}
		
		if (myConn != null) {
			myConn.close();
		}
		if (myPstmt != null)
		{
			myPstmt.close();
		}
	}
	private void close(Statement myStmt, ResultSet myRs,PreparedStatement myPstmt) throws SQLException {
		close(null, myStmt, myRs, myPstmt);		
	}

	@Override
	public boolean hasNext() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object next() {
		// TODO Auto-generated method stub
		return null;
	}

}




