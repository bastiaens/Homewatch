package Videotheque_modele;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
/**
 * @author Olivier Bastiaens et JL
 */
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;


public class OeuvreDAO {
private Connection myConn;
	
	public OeuvreDAO() throws Exception {
		
		// get db properties
		Properties props = new Properties();
		props.load(new FileInputStream("Mysql/videot.properties"));
		
		String user = props.getProperty("user");
		String password = props.getProperty("password");
		String dburl = props.getProperty("dburl");
		
		// connect to database
		myConn = DriverManager.getConnection(dburl, user, password);
		
		System.out.println("DB connection successful to: " + dburl);
	}
	
	public List<Oeuvre> getAllOeuvres() throws Exception {
		List<Oeuvre> list = new ArrayList<>();

		Statement myStmt = null;
		ResultSet myRs = null;

		try {
		
			myStmt = myConn.createStatement();
			myRs = myStmt.executeQuery("select * from Film");
			
			while (myRs.next()) {
				Oeuvre tempOeuvre = convertRowToOeuvre(myRs);
				list.add(tempOeuvre);
			}
			
			return list;
		}
		finally {
			close(myStmt, myRs, null);
		}
	}
	
	/**
	 * 
	 * @param titre
	 * @return
	 * @throws Exception
	 */
	public Oeuvre searchOeuvre(String titre) throws Exception {
		List<Oeuvre> list = new ArrayList<>();
		Oeuvre o1 = new Oeuvre(0,"","",0,"","",0,0);	//Oeuvre placeholder. Servira a trouver l'element.
		PreparedStatement myStmt = null;
		ResultSet myRs = null;
		
		try {
			titre += "%";
			myStmt = myConn.prepareStatement("select f.idFilm, f.titre, f.description, r.idRéalisateur, r.nom_re, r.prenom_re, g.idGenre, g.genre, f.date_parution "
					+ "from film as f natural join genre as g natural join réalisateur as r where titre like ?");
			
			myStmt.setString(1, titre);
			
			myRs = myStmt.executeQuery();
			
			while (myRs.next()) 
			{
				if(o1.getTitre() == titre)
				{

					Oeuvre tempOeuvre = convertRowToOeuvre(myRs);
					o1= tempOeuvre;
					
				}
			}
			
			return o1;
		}
		finally {
			close(myStmt, myRs, myStmt);
		}
	}
	
	/**
	 * 
	 * @param Oeuvre
	 * @throws Exception
	 */
	public void AddOeuvres(Oeuvre Oeuvre ) throws Exception {
		PreparedStatement myPstmt = null;
		
		try {
			myPstmt = myConn.prepareStatement("INSERT INTO `videot`.`film` (`titre`, `idRéalisateur`, `idGenre`, `date_parution`) VALUES (?,?,?,?);");
			
			//set param
			myPstmt.setString(1, Oeuvre.getTitre());
			myPstmt.setInt(2, Oeuvre.getIdRéalisateur());
			myPstmt.setInt(3, Oeuvre.getIdGenre());
			myPstmt.setInt(4, Oeuvre.getDate_parution());
		
			//exécutée la requête
			myPstmt.executeUpdate();
			
		}
		finally {
			close(null, null, myPstmt);
		}
	}
	
	//reçoit un Objet oeuvre en param

	/**
	 * 
	 * @param ancienTitre
	 * @param Oeuvre
	 * @throws Exception
	 */
	public void UpdateOeuvres(String ancienTitre, Oeuvre Oeuvre ) throws Exception {
		PreparedStatement myPstmt = null;
		
		try {
			//myPstmt = myConn.prepareStatement("UPDATE film SET  titre=?, description=?, idRéalisateur=?, idGenre=?, date_parution=? WHERE titre =ancienTitre ");
			myPstmt = myConn.prepareStatement("SET SQL_SAFE_UPDATES=0 );"
			+ "UPDATE film SET titre=?, description =?, idRéalisateur = 2, idGenre = 5, date_parution =? WHERE titre like '" + ancienTitre);
			//set param
			myPstmt.setString(2, Oeuvre.getTitre());
			myPstmt.setString(3, Oeuvre.getDescription());
			myPstmt.setInt(4, Oeuvre.getIdRéalisateur());
			myPstmt.setInt(5, Oeuvre.getIdGenre());
			myPstmt.setInt(6, Oeuvre.getDate_parution());
		
			//exécutée la requête
			myPstmt.executeUpdate();
			
		}
		finally {
			close(null, null, myPstmt);
		}
	}
	
	/**
	 * 
	 * @param idFilm
	 * @throws Exception
	 */
	public void DeleteOeuvres(int idFilm ) throws Exception {
		PreparedStatement myPstmt = null;
		
		try {
			myPstmt = myConn.prepareStatement("delete from film where idFilm =?");
			
			//set param
			myPstmt.setInt(1, idFilm);
			//exécutée la requête
			myPstmt.executeUpdate();
			
		}
		finally {
			close(myPstmt, null, myPstmt);
		}
	}
	/**
	 * 
	 * @param myRs
	 * @return
	 * @throws SQLException
	 */
	private Oeuvre convertRowToOeuvre(ResultSet myRs) throws SQLException {
		
		int idFilm = myRs.getInt("idFilm");
		String titre = myRs.getString("titre");
		String des = myRs.getString("description");
		int idRéalisateur = myRs.getInt("idRéalisateur");
		String nameR = myRs.getString("nom_re");
		String fnameR = myRs.getString("prenom_re");
		int idGenre = myRs.getInt("idGenre");
		int date_parution = myRs.getInt("Date_parution");
		
		Oeuvre tempOeuvre = new Oeuvre(idFilm,titre,des,idRéalisateur,nameR,fnameR,idGenre,date_parution);
		
		return tempOeuvre;
	}
	
	
	/**
	 * 
	 * @param myConn
	 * @param myStmt
	 * @param myRs
	 * @param myPstmt
	 * @throws SQLException
	 */
	private static void close(Connection myConn, Statement myStmt, ResultSet myRs, PreparedStatement myPstmt)
			throws SQLException {

		if (myRs != null) {
			myRs.close();
		}

		if (myStmt != null) {
			
		}
		
		if (myConn != null) {
			myConn.close();
		}
		if (myPstmt != null) {
			
		}
	}

	private void close(Statement myStmt, ResultSet myRs,PreparedStatement myPstmt) throws SQLException {
		close(null, myStmt, myRs, myPstmt);		
	}

}

   
