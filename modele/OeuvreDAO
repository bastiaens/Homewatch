package Home.modele;
 
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Properties;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import Home.vue.*;

/**
 * Classe d'oeuvres cinématographiques hébergées dans des base de données DAO (Data Access Object).
 * @author Olivier Bastiaens et JL
 */

public class OeuvreDAO extends Observable implements Iterator {
	
private Connection myConn;
private List<Oeuvre> list = new ArrayList<>();
private List<Personne> listActors = new ArrayList<>();


	/**
	*Constructeur d'oeuvres de type DAO.
	*
	*
	**/
	public OeuvreDAO() throws Exception {
		
		// va rechercher le mot de passe, le nom de l'utilisateur et l'URL de connection dans un dossier Mysql
		Properties props = new Properties();
		props.load(new FileInputStream("Mysql/videot.properties"));
		
		String user = props.getProperty("user");
		String password = props.getProperty("password");
		String dburl = props.getProperty("dburl");
		
		// connect to database
		myConn = DriverManager.getConnection(dburl, user, password);
		
		System.out.println("DB connection successful to: " + dburl);
	}
	
	/**
	 * Méthode qui renvoie tout les film de la db
	 * @return list, list contenant tous les films se trouvant dans la db
	 * @throws Exception
	 */
	
	public List<Oeuvre> getAllOeuvres() throws Exception {
		
		//Pour les acteurs : rajouter les colonnes nom_a + les NATURAL JOIN qu'il faut
		String req = "SELECT idFilm, titre, genre, nom_re, prenom_re, date_parution, description, couverture FROM videot.film natural JOIN videot.genre natural join videot.réalisateur";
		Statement myStmt = null;
		ResultSet myRs = null;

		try {
		
			myStmt = myConn.createStatement();
			myRs = myStmt.executeQuery(req);
			Oeuvre oeuvre;
			while (myRs.next()) {
				 oeuvre = new Oeuvre (myRs.getInt("idFilm"),
						 myRs.getString("titre"),
						 myRs.getString("genre"),
						 myRs.getString("nom_re"),
						 myRs.getString("prenom_re"),
						 myRs.getInt("date_parution"),
						 myRs.getString("description"),
						 myRs.getString("couverture")
						 //myRs.getString("nom_a")
						 )
						 ;
				list.add(oeuvre);
			}
			
			return list;
		}
		finally {
			close(myStmt, myRs, null);
		}
	}
	/**
	*Methode de recuperation de tous les acteurs pour un film en particulier.
	*@param titre Le titre du film dont le casting est répertorié.
	**/
	public List<Personne> getAllActeurs(String titre) throws Exception
	{
		String req = "SELECT titre, nom_a, prenom_a"
				+ " FROM videot.acteur_film NATURAL JOIN acteur NATURAL JOIN film WHERE titre = ?"; //requête sql a modifier
		PreparedStatement myStmt = null;
		ResultSet myRs = null;

		try {
			myStmt = myConn.prepareStatement(req);
			myStmt.setString(1, titre);
			myRs = myStmt.executeQuery();
			Personne acteur;
			while (myRs.next()) {
				 acteur = new Personne (
						 myRs.getString("nom_a"),
						 myRs.getString("prenom_a"))
						 ;
				listActors.add(acteur);
			}
			
			return listActors;
		}
		finally {
			close(myStmt, myRs, null);
		}
		
	}	
	
	
	/**
	*Methode d'affichage d'une liste d'oeuvres sous forme littérale.
	*@param list une liste d'objets Oeuvres.
	*@return L'ensemble de la liste d'oeuvres sous forme de chaine de caracteres.
	**/
	public String displayListeOeuvre(List<Oeuvre> list){
		String catalogue = "";
		
		for(Iterator it = list.iterator(); it.hasNext();)
		{
			catalogue += it.next().toString();
			
		}
		
		return catalogue;
		
	}
	
	/**
	 * Méthode permettant de rechercher un film sur base de son titre entre par l'utilisateur.
	 * @param titre Le titre du film a retrouver.
	 * @return Toutes les informations concernant le film demande.
	 * @throws Exception
	 */
	public List<Oeuvre> searchOeuvre(String titre) throws Exception {
		
		String req = "select idFilm, titre, genre, nom_re, prenom_re, date_parution, description"
				+ " from videot.film natural join videot.genre natural join videot.réalisateur where titre like ?";
		PreparedStatement myStmt = null;
		ResultSet myRs = null;

		try {
			titre += "%";
			myStmt = myConn.prepareStatement(req);
			myStmt.setString(1, titre);
			myRs = myStmt.executeQuery();
			Oeuvre Oeuvre;
			while (myRs.next()) {
				 Oeuvre = new Oeuvre (myRs.getInt("idFilm"),
						 myRs.getString("titre"),
						 myRs.getString("genre"),
						 myRs.getString("nom_re"),
						 myRs.getString("prenom_re"),
						 myRs.getInt("date_parution"),
						 myRs.getString("description"));
				list.add(Oeuvre);
			}
			
			return list;
		}
		finally {
			close(myStmt, myRs, null);
		}
	}
		
	
	/**
	 * Méthode permettant de rechercher un film sur base de son identifiant entre par l'utilisateur
	 * @param id L'identifiant du film a retrouver.
	 * @return toutes les informations concernant le film demande.
	 * @throws Exception
	 */
	public List<Oeuvre> searchOeuvreById(String id) throws Exception {
		
		String req = "select idFilm, titre, genre, nom_re, prenom_re, date_parution, description"
				+ " from videot.film natural join videot.genre natural join videot.réalisateur where idFilm = ?";
		PreparedStatement myStmt = null;
		ResultSet myRs = null;

		try {
			id += "%";
			myStmt = myConn.prepareStatement(req);
			myStmt.setString(1, id);
			myRs = myStmt.executeQuery();
			Oeuvre Oeuvre;
			while (myRs.next()) {
				Oeuvre = new Oeuvre (myRs.getInt("idFilm"),
						 myRs.getString("titre"),
						 myRs.getString("genre"),
						 myRs.getString("nom_re"),
						 myRs.getString("prenom_re"),
						 myRs.getInt("date_parution"),
						 myRs.getString("description"));
				list.add(Oeuvre);
			}
			
			return list;
		}
		finally {
			close(myStmt, myRs, null);
		}
	}

		
	
	
	/**
	 *Méthode permettant de recuperer l'identifiant d'un realisateur donne.
	 * @return idRea L'identifiant du realisateur a retrouver. 
	 * @param nomR,prenoMR
	 * @throws Exception
	 */
	public int rechercheRéalisateurId(String nomR, String prenomR){
		
		int idRea = 0; //variable de travail
		String reqIdRea = "SELECT idRéalisateur FROM réalisateur WHERE nom_re = ? and prenom_re = ? ";
		PreparedStatement myStmt = null;
		ResultSet myRs = null;
    	
    	try {
    	    myStmt = myConn.prepareStatement(reqIdRea);
    	    myStmt.setString(1, nomR);
    	    myStmt.setString(2, prenomR);
    	    myRs = myStmt.executeQuery();

    		while(myRs.next()) {
    			idRea = myRs.getInt("idRéalisateur");
    		}
    	} catch(SQLException e) {
    		e.printStackTrace();
    	}
		
		return idRea;
		
	}
	/**
	*Methode d'ajout d'une oeuvre a la base de donnees.
	*@param o L'oeuvre a rajouter.
	*
	**/
	public void addOeuvre(Oeuvre o) throws Exception
	{
		PreparedStatement myPstmt = null;
		PreparedStatement myPstmt3 = null;
		
		//les requêtes:
		String reqFilm = "INSERT INTO videot.film (titre, date_parution, idRéalisateur, idGenre) VALUES (?,?,?,?)";
		String reqRéalisateur = "INSERT INTO videot.réalisateur (nom_re, prenom_re) VALUES(?,?)";
		
		try {
			myPstmt = myConn.prepareStatement(reqFilm);
			//set param pour tab film
			myPstmt.setString(1, o.getTitre());
			myPstmt.setInt(2, o.getDate_parution());
			myPstmt.setInt(3,  rechercheRéalisateurId(o.getNomReal(), o.getPrenomReal()));
			myPstmt.setInt(4, rechercheGenreId(o.getGenre()));
			myPstmt.executeUpdate();
			
			
			/* 
			 * Creation du nouvel element (l'id du genre est null)
			 * Update film SET idGenre = legenredelutilisateur WHERE titre = titredelutilisateur
			 * */
			
			myPstmt3 = myConn.prepareStatement(reqRéalisateur);
			//set param pour tab réalisateur
			myPstmt3.setString(1, o.getNomReal());
			myPstmt3.setString(2, o.getPrenomReal());
			myPstmt3.executeUpdate();
			setChanged();
			notifyObservers();
			
		}
		finally {
			close(null, null, null, myPstmt);
			close(null, null, null, myPstmt3);
		}
		
	}

	/**
	 * 
	 * Méthode permettant de modifier les données d'un film 
	 * @param Oeuvre L'oeuvre a mettre a jour.
	 * @throws Exception
	 */
	public void UpdateOeuvres(Oeuvre Oeuvre ) throws Exception {//ne marche pas 
		PreparedStatement myPstmt = null;
		
		try {
			//myPstmt = myConn.prepareStatement("UPDATE film SET  titre=?, description=?, idRéalisateur=?, idGenre=?, date_parution=? WHERE titre =ancienTitre ");
			//myPstmt = myConn.prepareStatement("UPDATE film SET titre=?, description=?, nom_re=?, idGenre=?, date_parution=?"
			//+ " WHERE idFilm = ?");
			
			myPstmt = myConn.prepareStatement("UPDATE film INNER JOIN realisateur INNER JOIN genre"
				+ "ON film.idFilm = realisateur.idFilm AND film.idGenre = genre.idGenre"
				+ "SET titre=?, description=?, nom_re=?, prenom_re=? ,genre=?, date_parution=?"
				+ "WHERE idFilm = ?"); 
			//set param
			
			myPstmt.setString(1, Oeuvre.getTitre());
			myPstmt.setString(2, Oeuvre.getDescription());
			myPstmt.setString(3, Oeuvre.getNomReal());
			myPstmt.setString(4, Oeuvre.getPrenomReal());
			myPstmt.setString(5, Oeuvre.getGenre());
			myPstmt.setInt(6, Oeuvre.getDate_parution());
			myPstmt.setInt(7, Oeuvre.getIdFilm());
		
			//exécuter la requête
			myPstmt.executeUpdate();
			System.out.println("le film a été modifié avec succès");
			setChanged();
			notifyObservers();
		}
		finally {
			close(null, null, myPstmt);
		}
	}
	
	/**
	 * Méthode permettant de supprimer un film de la base de données (donc de la GUI). 
	 * @param titre Le titre de l'oeuvre a eliminer.
	 * @throws Exception
	 */
	public void deleteOeuvres(String titre ) throws Exception {
		PreparedStatement myPstmt = null;
		
		try
		{
			
			myPstmt = myConn.prepareStatement("DELETE From videot.film"
					+ " WHERE titre = ?");
			myPstmt.setString(1, titre);
					
			myPstmt.executeUpdate();
			System.out.println("le film a été supprimé avec succès.");
			setChanged();
			notifyObservers();
	

		}
		finally
		{
			close(null,null,myPstmt);
		}
	}
	
	/**
	*Methode de recherche de film sur base de l'identifiant de l'oeuvre.
	*@param genre Le genre du film, sous forme de chaine de caractères.
	*@return idGenre L'identifiant du film.
	**/
	public int rechercheGenreId(String genre){
		
		int idGenre = 0; //variable de travail
		String reqIdGenre = "SELECT idGenre FROM genre WHERE genre = ? ";
		PreparedStatement myStmt = null;
		ResultSet myRs = null;
    	
    	try {
    	    myStmt = myConn.prepareStatement(reqIdGenre);
    	    myStmt.setString(1, genre);
    	    myRs = myStmt.executeQuery();

    		while(myRs.next()) {
    			idGenre = myRs.getInt("idGenre");
    		}
    	} catch(SQLException e) {
    		e.printStackTrace();
    	}
		
		return idGenre;
		
	}
	
	/**
	*Methode de conversion d'elements d'une arraylist d'oeuvres en ligne de JTable.
	*@param model Le modèle de la table qui est inséré dans l'interface graphique.
	*@param titre Le titre du film.
	**/
	public void addRowtoJTable(DefaultTableModel model, String titre) throws Exception {
		
		List<Oeuvre> film = new ArrayList<Oeuvre>();
		film = searchOeuvre(titre);
		
		  Object[] row = new Object[7];
		  for(int i = 0; i < film.size(); i++)
		  {
			  row[0] = film.get(i).getIdFilm();
	           row[1] = film.get(i).getTitre();
	           row[2] = film.get(i).getGenre();
	           row[3] = film.get(i).getNomReal();
	           row[4] = film.get(i).getPrenomReal();
	           row[5] = film.get(i).getDate_parution();
	           row[6] = film.get(i).getDescription();
	           //row[7] = film.get(i).getNomAct();
	           //row[7] = film.get(i).getCheminImage();
	           model.addRow(row);
		  }
		  setChanged();
		  notifyObservers();
	
	}
	

	/**
	 * 	Methode de reinitialisation d'un modele contenant des films.
	 * @param model
	 */
	public void clearJTable(DefaultTableModel model) throws Exception
	{
		
		model.setRowCount(0);
		
	}
	/**
	 * Methode de conversion de listes d'objets de type Personne en une chaine de caracteres.
	 * @param liste Une liste d'objets de typePersonne.
	 * @return Une liste d'acteurs sous forme de chaine de caracteres.
	 */
	private String toStringActeurs(List<Personne> liste)
	{
		String catalogue = "";
		
		for(Iterator it = liste.iterator(); it.hasNext();)
		{
			catalogue += it.next().toString();
			
		}
		
		return catalogue;
		
	}
	
	
	/**
	 * Methode de fermeture d'un objet DAO (de la base de données).
	 * @param myConn
	 * @param myStmt
	 * @param myRs
	 * @param myPstmt
	 * @throws SQLException
	 */
	private static void close(Connection myConn, Statement myStmt, ResultSet myRs, PreparedStatement myPstmt)
			throws SQLException {

		if (myRs != null) {
			myRs.close();
		}

		if (myStmt != null) {
			myStmt.close();
		}
		
		if (myConn != null) {
			myConn.close();
		}
		if (myPstmt != null)
		{
			myPstmt.close();
		}
	}
	private void close(Statement myStmt, ResultSet myRs,PreparedStatement myPstmt) throws SQLException {
		close(null, myStmt, myRs, myPstmt);		
	}

	@Override
	public boolean hasNext() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object next() {
		// TODO Auto-generated method stub
		return null;
	}

}



