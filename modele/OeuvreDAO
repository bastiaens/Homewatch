package Home.modele;
 
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Properties;

import javax.swing.table.DefaultTableModel;

import Home.vue.*;

/**
 * @author Olivier Bastiaens et JL
 */

public class OeuvreDAO extends Observable implements Iterator {
	
private Connection myConn;
private List<Oeuvre> list = new ArrayList<>();

	
	public OeuvreDAO() throws Exception {
		
		// va rechercher le mot de passe, le nom de l'utilisateur et l'URL de connection dans un dossier Mysql
		Properties props = new Properties();
		props.load(new FileInputStream("Mysql/videot.properties"));
		
		String user = props.getProperty("user");
		String password = props.getProperty("password");
		String dburl = props.getProperty("dburl");
		
		// connect to database
		myConn = DriverManager.getConnection(dburl, user, password);
		
		System.out.println("DB connection successful to: " + dburl);
	}
	
	/**
	 * Méthode qui renvoie tout les film de la db
	 * @return list, list contenent tout les films se trouvant dans la db
	 * @throws Exception
	 */
	
	public List<Oeuvre> getAllOeuvres() throws Exception {
		
		
		String req = "select idFilm, titre, genre, nom_re, prenom_re, date_parution"
				+ " from videot.film natural join videot.genre natural join videot.réalisateur;";
		Statement myStmt = null;
		ResultSet myRs = null;

		try {
		
			myStmt = myConn.createStatement();
			myRs = myStmt.executeQuery(req);
			Oeuvre Oeuvre;
			while (myRs.next()) {
				 Oeuvre = new Oeuvre (myRs.getInt("idFilm"),
						 myRs.getString("titre"),
						 myRs.getString("genre"),
						 myRs.getString("nom_re"),
						 myRs.getString("prenom_re"),
						 myRs.getInt("date_parution"));
				list.add(Oeuvre);
			}
			
			return list;
		}
		finally {
			close(myStmt, myRs, null);
		}
	}
	
	public String displayListeOeuvre(List<Oeuvre> list){
		String catalogue = "";
		
		for(Iterator it = list.iterator(); it.hasNext();)
		{
			catalogue += it.next().toString();
			
		}
		
		return catalogue;
		
	}
	/**
	 * Méthode qui permet de rechercher un film sur base de son titre
	 * @param titre
	 * @return tout les informations concernant le film demander
	 * @throws Exception
	 */
	public Oeuvre searchOeuvre(String titre) throws Exception {
		List<Oeuvre> list = new ArrayList<>();
		Oeuvre o1 = new Oeuvre(0,"","",0,"","",0,0);	//Oeuvre placeholder. Servira a trouver l'element.
		PreparedStatement myStmt = null;
		ResultSet myRs = null;
		
		try {
			titre += "%";
			myStmt = myConn.prepareStatement("select f.idFilm, f.titre, f.description, r.idRéalisateur, r.nom_re, r.prenom_re, f.date_parution "
					+ "from film as f natural natural join réalisateur as r"
					+ " where titre like ?");
			
			myStmt.setString(1, titre);
			
			myRs = myStmt.executeQuery();
			
			while (myRs.next()) 
			{
				if(o1.getTitre() == titre)
				{
							//encore à modifier
					Oeuvre tempOeuvre = new Oeuvre (myRs.getInt("idFilm"),
							 myRs.getString("titre"),
							 myRs.getString("description"),
							 myRs.getString("idRéalisateur"),
							 myRs.getString("nom_re"),
							 myRs.getString("prenom_re"),
							 myRs.getInt("date_parution"));
					o1= tempOeuvre;
					
				}
			}
			
			return o1;
		}
		finally {
			close(myStmt, myRs, myStmt);
		}
	}
	
	/**
	 *Méthode permettant d'ajouter un film dans la base de donnée.
	 * @param Oeuvre
	 * @throws Exception
	 */
	public void AddOeuvres(Oeuvre Oeuvre ) throws Exception {
		PreparedStatement myPstmt = null;
		
		try {
			myPstmt = myConn.prepareStatement("INSERT INTO `videot`.`film` (`titre`, `idRéalisateur`, `idGenre`, `date_parution`) VALUES (?,?,?,?);");
			
			//set param
			myPstmt.setString(1, Oeuvre.getTitre());
			myPstmt.setInt(2, Oeuvre.getIdRéalisateur());
			myPstmt.setInt(3, Oeuvre.getIdGenre());
			myPstmt.setInt(4, Oeuvre.getDate_parution());
		
			//exécutée la requête
			myPstmt.executeUpdate();
			
		}
		finally {
			close(null, null, myPstmt);
		}
	}
	
	//reçoit un Objet oeuvre en param

	/**
	 * 
	 * Méthode qui permet de modifier les données d'un film 
	 * @param Oeuvre
	 * @throws Exception
	 */
	public void UpdateOeuvres(Oeuvre Oeuvre ) throws Exception {
		PreparedStatement myPstmt = null;
		
		try {
			//myPstmt = myConn.prepareStatement("UPDATE film SET  titre=?, description=?, idRéalisateur=?, idGenre=?, date_parution=? WHERE titre =ancienTitre ");
			myPstmt = myConn.prepareStatement("UPDATE film SET titre=?, description=?, idRéalisateur=?, idGenre=?, date_parution=?"
			+ " WHERE idFilm = ?");
			
			//set param
			
			myPstmt.setString(1, Oeuvre.getTitre());
			myPstmt.setString(2, Oeuvre.getDescription());
			myPstmt.setInt(3, Oeuvre.getIdRéalisateur());
			myPstmt.setInt(4, Oeuvre.getIdGenre());
			myPstmt.setInt(5, Oeuvre.getDate_parution());
			myPstmt.setInt(6, Oeuvre.getIdFilm());
		
			//exécutée la requête
			myPstmt.executeUpdate();
			System.out.println("le film a été modifié avec succes");
		}
		finally {
			close(null, null, myPstmt);
		}
	}
	
	/**
	 * Méthode qui permet de supprimer un film 
	 * @param idFilm
	 * @throws Exception
	 */
	public void DeleteOeuvres(int idFilm ) throws Exception {
		PreparedStatement myPstmt = null;
		
		try {
			myPstmt = myConn.prepareStatement("delete from film where idFilm =?");
			
			//set param
			myPstmt.setInt(1, idFilm);
			//exécutée la requête
			myPstmt.executeUpdate();
			
		}
		finally {
			close(myPstmt, null, myPstmt);
		}
	}
	
	 
	/**
	 * 
	 * @param myRs
	 * @return
	 * @throws SQLException
	 */
	/*private Oeuvre convertRowToOeuvre(ResultSet myRs) throws SQLException {
		
		int idFilm = myRs.getInt("idFilm");
		String titre = myRs.getString("titre");
		String genre = myRs.getString("genre");
		String nameR = myRs.getString("nom_re");
		String fnameR = myRs.getString("prenom_re");
		int date_parution = myRs.getInt("Date_parution");
		
		
		Oeuvre tempOeuvre = new Oeuvre(idFilm,titre,genre, nameR,fnameR, date_parution);
		return tempOeuvre;
	/*}
	
	
	/**
	 * 
	 * @param myConn
	 * @param myStmt
	 * @param myRs
	 * @param myPstmt
	 * @throws SQLException
	 */
	private static void close(Connection myConn, Statement myStmt, ResultSet myRs, PreparedStatement myPstmt)
			throws SQLException {

		if (myRs != null) {
			myRs.close();
		}

		if (myStmt != null) {
			
		}
		
		if (myConn != null) {
			myConn.close();
		}
		if (myPstmt != null) {
			
		}
	}

	private void close(Statement myStmt, ResultSet myRs,PreparedStatement myPstmt) throws SQLException {
		close(null, myStmt, myRs, myPstmt);		
	}

	@Override
	public boolean hasNext() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object next() {
		// TODO Auto-generated method stub
		return null;
	}

}
